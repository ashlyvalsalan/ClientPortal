Controller
**************************************
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.Entity;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Security.Cryptography.X509Certificates;
using System.Web;
using System.Web.Configuration;
using System.Web.Mvc;
using System.Web.Mvc.Html;
//using ClientPortal.Models;
//using ClientPortal.ViewModels;
using Microsoft.Win32;
using Streemline3_1Poco;
using PetaPoco;

namespace ClientPortal.Controllers
{
    public class IssuesController : Controller
    {
        //private Streemline3_1Entities db = new Streemline3_1Entities();
        private Streemline3_1PocoDB pocoDb = new Streemline3_1PocoDB();
        // GET: Issues
        /*
          public ActionResult Index()
          {
              var tblIssues = db.tblIssues.Include(t => t.tblIssueType).Include(t => t.tblIssueCategory).Include(t => t.tblIssuePriority).Include(t => t.tblIssueStatu);
             var tblstatus = db.tblIssueStatus.ToList();
              var tblSolution = db.tblSolutions.Where(a => a.IsActive == true);
              var VM = new ClientPortal.ViewModels.IssueListViewModel
              {
                  Issues = tblIssues,
                  Statuses = tblstatus,
                  Solutions =tblSolution
              };
              return View(VM);
          }
        */

        public ActionResult Index()
        {
           // Session["statusID"] = statusID;
           // var tblIssues = db.tblIssues.Include(t => t.tblIssueType).Include(t => t.tblIssueCategory).Include(t => t.tblIssuePriority).Include(t => t.tblIssueStatu).Where(a=>a.issueStatusID == statusID);
          //  var tblstatus = db.tblIssueStatus.ToList();
            //var tblSolution = db.tblSolutions.Where(a => a.IsActive == true).ToList();
            var solutions = pocoDb.Fetch<tblSolution>(" WHERE isActive=1");

            var VM = new ClientPortal.ViewModels.IssueListViewModel
            {
            
                Solutions = solutions


            };

            return View(VM);
        }
      
        // GET: Issues/Details/5 
        public ActionResult Details(int? id)
        {
            Session["issueID"] = id;
            //var tblStatus = db.tblIssues.Where(a => a.issueID == id).FirstOrDefault();
            var tblStatus = pocoDb.Fetch<tblIssue>(" WHERE issueId = @0", id).FirstOrDefault();

            Session["statusID"] = tblStatus.issueStatusID;
            //var tblIssue =  ;
            //var issueList = db.tblIssues.Where(a => a.issueID == id).FirstOrDefault();
            var issueList=pocoDb.Fetch<tblIssue>(" WHERE issueId = @0", id).FirstOrDefault();
            ViewBag.issuetitle= issueList.issueTitle;
            ViewBag.issueDescription = issueList.issueDescription;

            //getting notes
            //var tblNote = db.tblNotes.Where(a => a.objectTypeID == 11 && a.objectID == id).ToList();
            var tblNote = pocoDb.Fetch<tblNote>(" Where  objectTypeID = @0  and objectID = @1", 11, id).ToList();
            var pids = tblNote.Select(x => x.createdByID).ToArray();
            //person created the note
            //var personlist = db.tblPersons.Where(x => pids.Contains(x.PersonID)).ToList();
            var personlist = pocoDb.Fetch<tblPerson>("Where PersonID IN (@0)", String.Join("", pids)).ToList();
            ViewBag.personlist = personlist;

            //getting attachments
            //  var tblAttachment = db.tblFileAttachments.Where(a => a.objectTypeID == 11 && a.itemID == id);
            var tblAttachment = pocoDb.Fetch<tblFileAttachment>("Where objectTypeID=@0 and itemID=@1",11,id);
            var VM = new ClientPortal.ViewModels.IssueListViewModel
            {

                Issue = issueList,
                Notes=tblNote,
                Attachments=tblAttachment
               

            };

            return View(VM);
        }
        public void UploadFiles(int issueID)
        {
            if (Request.Files.Count > 0)
            {
              
                    HttpFileCollectionBase files = Request.Files;
                 //   string savePath = WebConfigurationManager.AppSettings["C:\taskItUploads"].ToString();
                    for (int i = 0; i < files.Count; i++)
                    {


                        HttpPostedFileBase file = files[i];
                        string fname;
                        fname = file.FileName;
                        var path = Path.Combine(Server.MapPath("~/taskItUploads/"), fname);
                        file.SaveAs(path);


                        //  file.SaveAs(fname);
                        string sItemid = issueID.ToString();
                        string sDateTime = DateTime.Now.ToString();
                        string sIdDateTime = string.Concat(sItemid, sDateTime);
                        if (ModelState.IsValid)
                        {
                            using (Streemline3_1PocoDB pocoDb = new Streemline3_1PocoDB())
                            {
                                tblFileAttachment fileAttachment = new tblFileAttachment();
                                fileAttachment.originalFileName = fname;
                                fileAttachment.itemID = issueID;
                                fileAttachment.createdDate = DateTime.Now;
                                fileAttachment.objectTypeID = 11;
                                fileAttachment.savedAsFileName = string.Concat(sIdDateTime, fname);
                            //   pocoDb.tblFileAttachments.Add(fileAttachment);
                            //  pocoDb.SaveChanges();
                            pocoDb.Insert(fileAttachment);
                            
                              

                            }
                        }


                    }
               
                
            }
           
        }
        public ActionResult AddNote(IssueListViewModel model)
        {
            
            if(ModelState.IsValid)
            {
                using (Streemline3_1PocoDB pocoDb = new Streemline3_1PocoDB())
                {
                    tblNote Note = new tblNote();
                    Note.noteText = model.Note.noteText;
                    Note.objectTypeID = 11;
                    Note.createdDate = DateTime.Now;
                    Note.objectID = model.Note.objectID;
                    //   Note.PersonID = 2;
                    pocoDb.Insert(Note);
                   // db.tblNotes.Add(Note);
                   // db.SaveChanges();
                }
            }
            return RedirectToAction("Details","Issues",new { id=model.Note.objectID});

        }
        public ActionResult statusChangeOnReopenButtonClick(int? issueID)
        {
            // var tblIssue = db.tblIssues.Where(a => a.issueID == issueID).First();
            var tblIssue = pocoDb.Fetch<tblIssue>(" WHERE issueID = @0", issueID).FirstOrDefault();
            if (ModelState.IsValid)
            {
                using (Streemline3_1PocoDB db = new Streemline3_1PocoDB())
                {
                    //tblIssue updateIssue= db.tblIssues.Where(a => a.issueID == issueID).FirstOrDefault();
                   // updateIssue.issueStatusID = 15;
                    
                   // db.SaveChanges();
                   tblIssue updateIssue=pocoDb.Fetch<tblIssue>(" WHERE issueID = @0", issueID).FirstOrDefault();
                    updateIssue.issueStatusID = 15;
                    pocoDb.Update(updateIssue);
                }
                
            }
            return RedirectToAction("Details", "Issues", new { id = issueID});
        }
        public ActionResult statusChangeOnReturnLink(int? issueID)
        {
            //var tblIssue = db.tblIssues.Where(a => a.issueID == issueID).First();
            var tblIssue = pocoDb.Fetch<tblIssue>(" WHERE issueID = @0", issueID).FirstOrDefault();

            if (ModelState.IsValid)
            {
                using (Streemline3_1PocoDB db = new Streemline3_1PocoDB())
                {
                    // tblIssue updateIssue = db.tblIssues.Where(a => a.issueID == issueID).FirstOrDefault();
                    // updateIssue.issueStatusID = 15;

                    //  db.SaveChanges();
                    tblIssue updateIssue = pocoDb.Fetch<tblIssue>(" WHERE issueID = @0", issueID).FirstOrDefault();
                    updateIssue.issueStatusID = 15;
                    pocoDb.Update(updateIssue);
                }

            }
            return RedirectToAction("Details", "Issues", new { id = issueID });
        }
       
       public ActionResult statusChangeOnMarkComplete(int? issueID)
        {
            // var tblIssue = db.tblIssues.Where(a => a.issueID == issueID).First();
            var tblIssue = pocoDb.Fetch<tblIssue>(" WHERE issueID = @0", issueID).FirstOrDefault();
            if (ModelState.IsValid)
            {
                using (Streemline3_1PocoDB db = new Streemline3_1PocoDB())
                {
                    //   tblIssue updateIssue = db.tblIssues.Where(a => a.issueID == issueID).FirstOrDefault();
                    //   updateIssue.issueStatusID = 11;

                    //   db.SaveChanges();
                    tblIssue updateIssue = pocoDb.Fetch<tblIssue>(" WHERE issueID = @0", issueID).FirstOrDefault();
                    updateIssue.issueStatusID = 11;
                    pocoDb.Update(updateIssue);
                }

            }
            return RedirectToAction("Details", "Issues", new { id = issueID });
        }
        // GET: Issues/Create
        [HttpGet]
        public ActionResult Create(string h, string w, string b, int componentid, string url, string solutionid)
        {
            Session["solutionID"] = solutionid;
            //tblSolution tblSolution = db.tblSolutions.Find(solutionid);
             
            int solutionID= Convert.ToInt32(solutionid);
            // var tblComponent = db.tblSolutionComponents.Where(a => a.solutionID ==solutionID);
            // var tblCompany = db.tblCompanies.ToList();
            //var tblstatus = db.tblIssueStatus.ToList();

            var tblComponent = pocoDb.Fetch<tblSolutionComponent>("WHERE solutionID = @0", solutionID).FirstOrDefault();
            var tblCompany = pocoDb.Fetch<tblCompany>("1=1").ToList();
            var tblstatus = pocoDb.Fetch<tblStatus>("").ToList();

            //  tblSolutionComponent tblSolutionComponent = db.tblSolutionComponents.Find(componentid);
            var tblSolutionComponent = pocoDb.Fetch<tblSolutionComponent>(" where componentID = @0", componentid).FirstOrDefault();
            string componentTitle = tblSolutionComponent.componentTitle;
            Session["height"] = h;
            Session["width"] = w;
            Session["browser"] = b;
            Session["componentId"] = componentid;
            Session["componentTitle"] = componentTitle;
            Session["url"] = url;
            Session["solutionID"] = solutionid;

            var VM = new ClientPortal.ViewModels.IssueCreateViewModel
            {

                Components = tblComponent,
                Statuses = tblstatus,
                

            };

            return View(VM);
        }
     

        // GET: Issues/Edit/5
        /*
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            tblIssue tblIssue = db.tblIssues.Find(id);
            if (tblIssue == null)
            {
                return HttpNotFound();
            }
            ViewBag.issueTypeID = new SelectList(db.tblIssueTypes, "typeID", "typeTitle", tblIssue.issueTypeID);
            ViewBag.issueCategoryID = new SelectList(db.tblIssueCategories, "categoryID", "categoryTitle", tblIssue.issueCategoryID);
            ViewBag.issuePriorityID = new SelectList(db.tblIssuePriorities, "priorityID", "priorityTitle", tblIssue.issuePriorityID);
            ViewBag.issueStatusID = new SelectList(db.tblIssueStatus, "statusID", "statusTitle", tblIssue.issueStatusID);
            return View(tblIssue);
        }
        */
        // POST: Issues/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to, for 
        // more details see https://go.microsoft.com/fwlink/?LinkId=317598.
        /*
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "issueID,issueTitle,issueDescription,solutionComponentID,issueTypeID,issueStatusID,issuePriorityID,issueCategoryID,EstimateMinutes,OwnerID,CreatedByID,CreatedDate,ModifiedByID,ModifiedDate,issueResolutionID,RaisedByID,IsPublic,IsCritical,IssueURL,pageUrl,browserWidth,browserHeight,userAgent,LastActivityDate,solutionId")] tblIssue tblIssue)
        {
            if (ModelState.IsValid)
            {
                db.Entry(tblIssue).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            ViewBag.issueTypeID = new SelectList(db.tblIssueTypes, "typeID", "typeTitle", tblIssue.issueTypeID);
            ViewBag.issueCategoryID = new SelectList(db.tblIssueCategories, "categoryID", "categoryTitle", tblIssue.issueCategoryID);
            ViewBag.issuePriorityID = new SelectList(db.tblIssuePriorities, "priorityID", "priorityTitle", tblIssue.issuePriorityID);
            ViewBag.issueStatusID = new SelectList(db.tblIssueStatus, "statusID", "statusTitle", tblIssue.issueStatusID);
            return View(tblIssue);
        }

        // GET: Issues/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            tblIssue tblIssue = db.tblIssues.Find(id);
            if (tblIssue == null)
            {
                return HttpNotFound();
            }
            return View(tblIssue);
        }

        // POST: Issues/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            tblIssue tblIssue = db.tblIssues.Find(id);
            db.tblIssues.Remove(tblIssue);
            db.SaveChanges();
            return RedirectToAction("Index");
        }
        */
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                pocoDb.Dispose();
            }
            base.Dispose(disposing);
        }
        
        public ActionResult filterStatus(int componentID, int statusID, int solutionID)
        {

             if (componentID == 0 && statusID ==0)
                 {
                // var tblIssuesAll = db.tblIssues.Include(t => t.tblIssueType).Include(t => t.tblIssueStatu).Where(a => a.solutionId == solutionID);
                //var personlist = db.tblPersons.Where(x => pids.Contains(x.PersonID)).ToList();
                //var personlist = pocoDb.Fetch<tblPerson>("Where PersonID IN (@0)", String.Join("", pids)).ToList();
                var tblIssuesAll = pocoDb.Fetch<tblIssue,tblIssueType,tblIssueStatus>("Where solutionId==@0", solutionID);
                var VM = new ClientPortal.ViewModels.IssueListViewModel
                     {
                         Issues = tblIssuesAll
                         //Statuses=tblstatus

                     };
                     return View(VM);
                 }
              else
                 {
                    if(componentID == 0)
                     {
                    //var tblIssuesStatus = db.tblIssues.Include(t => t.tblIssueType).Include(t => t.tblIssueStatu).Where(a => a.issueStatusID == statusID && a.solutionId == solutionID);
                    var tblIssuesStatus = pocoDb.Fetch<tblIssueType, tblIssueStatus>("Where issueStatusID=@0 and solutionId=@1", statusID, solutionID);

                    //  var tblstatus = db.tblIssueStatus.ToList();
                    var VMStatus = new ClientPortal.ViewModels.IssueListViewModel
                    {
                        Issues = tblIssuesStatus
                        //Statuses=tblstatus

                    };

                    return PartialView(VMStatus);
                }
                    else if(statusID == 0)
                {
                   // var tblIssuesComponent = db.tblIssues.Include(t => t.tblIssueType).Include(t => t.tblIssueStatu).Where(a => a.solutionComponentID == componentID && a.solutionId == solutionID);
                    var tblIssuesComponent=pocoDb.Fetch< tblIssues, tblIssueType, tblIssueStatu>("Where solutionComponentID=@0 and solutionId=@1", componentID, solutionID);

                    //  var tblstatus = db.tblIssueStatus.ToList();
                    var VMComponent= new ClientPortal.ViewModels.IssueListViewModel
                    {
                        Issues = tblIssuesComponent
                        //Statuses=tblstatus

                    };

                    return PartialView(VMComponent);
                }
                else
                {
                   // var tblIssuesBoth = db.tblIssues.Include(t => t.tblIssueType).Include(t => t.tblIssueStatu).Where(a => a.solutionComponentID == componentID && a.issueStatusID == statusID && a.solutionId == solutionID);
                   var tblIssuesBoth=pocoDb.Fetch<tblIssues, tblIssueType, tblIssueStatu>("Where solutionComponentID=@0 and issueStatusID=@1 and solutionId= @2", componentID, statusID, solutionID);

                    //  var tblstatus = db.tblIssueStatus.ToList();
                    var VMBoth = new ClientPortal.ViewModels.IssueListViewModel
                    {
                        Issues = tblIssuesBoth
                        //Statuses=tblstatus

                    };

                    return PartialView(VMBoth);
                }
               
            } 
                              
        }
  
        
        public ActionResult solutionIssues(int ID)
        {
                Session["solutionId"] = ID;
                //tblSolution tblSolution = db.tblSolutions.Find(ID);
                var tblSolution = pocoDb.Fetch<tblSolution>(" where solutionID = @0", ID).FirstOrDefault();
                string solutionTitle = tblSolution.solutionTitle;
                Session["solutionTitle"] = solutionTitle;

            // var tblIssues = db.tblIssues.Include(t => t.tblIssueType).Include(t => t.tblIssueStatu).Where(a => a.solutionId == ID);
                var tblIssues = pocoDb.Fetch<tblIssue, tblIssueType, tblIssueStatus>("where solutionID=@0", ID);
            // var tblstatus = db.tblIssueStatus.ToList();
            //var tblComponent = db.tblSolutionComponents.Where(a => a.solutionID == ID);
            var tblstatus = pocoDb.Fetch<tblIssueStatus>("1=1").ToList();
            var tblComponent = pocoDb.Fetch<tblSolutionComponent>("where solutionID=@0", ID);
                var VM = new ClientPortal.ViewModels.IssueListViewModel
                {
                    Issues = tblIssues,
                    Statuses = tblstatus,
                    Components = tblComponent
                };

                return View(VM);
           
         
        }
      
     
        [HttpPost]
        public ActionResult saveRecord(IssueCreateViewModel model)
        {

            Streemline3_1PocoDB pocoDb  = new Streemline3_1PocoDB();
            try
            {
                if (ModelState.IsValid)
                {
                    tblIssue issue = new tblIssue();
                    issue.issueTitle = model.Issue.issueTitle;
                    issue.issueDescription = model.Issue.issueDescription;
                    issue.solutionComponentID = model.Issue.solutionComponentID;
                    issue.issueTypeID = model.Issue.issueTypeID;
                    issue.issueStatusID = model.Issue.issueStatusID;
                    issue.IssueURL = model.Issue.IssueURL;
                    issue.IsCritical = model.Issue.IsCritical;
                    issue.browserHeight = model.Issue.browserHeight;
                    issue.browserWidth = model.Issue.browserWidth;
                    issue.userAgent = model.Issue.userAgent;
                    issue.CreatedDate = DateTime.Now;
                    issue.issueCategoryID = 1;
                    issue.issuePriorityID = 1;
                    if(issue.issueDescription == null)
                    {
                        issue.issueDescription = "";
                    }
                    issue.solutionId = model.Issue.solutionId;
                    pocoDb.Insert(issue);
                    // db.tblIssues.Add(issue);
                    // db.SaveChanges();


                    return RedirectToAction("Issues/solutionIssues/");
                }
            }
            catch(Exception ex)
            {
                
            }
            
            
           
            return RedirectToAction("Issues/solutionIssues");
        }
      
        public void Go()
        {
            string width ="0";
            string height ="0";
            string browser ="0";
            if (Request.QueryString["url"] == null)
            {
                Response.Redirect("/Issue/solutionIssues"); 
                //return RedirectToAction("Go","Issues");
            }


            String projectUrl = Convert.ToString(Request.QueryString["projectUrl"]);
            String url = Convert.ToString(Request.QueryString["url"]);
            if (String.IsNullOrEmpty(projectUrl)) { projectUrl = url; }
           
            string baseUrl = getBaseUrl(projectUrl);
            String pageurl = getPageUrl(baseUrl,url);
            pageurl = pageurl.Replace("http://", "");
            pageurl = pageurl.Replace("#", "#.aspx");
            Int32 solutionID = getSolutionID(baseUrl);

            if (solutionID == 0)
            { Response.Redirect(String.Format("/error?msg=Solution not found for {0}.", baseUrl)); }
            Session["SolutionID"] = solutionID;
            
            string componentTitle = Request.QueryString["ct"].ToString();
            Int32 componentId =getComponentID(pageurl, solutionID);
            String redirectPage = "/Issues/Create";
            if (Request.QueryString["w"] != null)
            {
                width = Request.QueryString["w"].ToString();
            }
            if (Request.QueryString["h"] != null)
            {
                height = Request.QueryString["h"].ToString();
            }
            if (Request.QueryString["b"] != null)
            {
                browser = Request.QueryString["b"].ToString();
            }

            if (Request.QueryString["ct"] == null)
            {
                Response.Redirect(redirectPage);
            }

            Response.Redirect(redirectPage + "?h=" + height + "&w=" + width + "&b=" + browser + "&componentid=" + componentId.ToString() + "&solutionid=" + solutionID.ToString() + "&url=" + Convert.ToString(Request.QueryString["url"]));

            
        }
        public static string getPageUrl(string BaseUrl, string url)
        {
            return url.Replace(BaseUrl, "");
          
        }
     
        public static string getBaseUrl(string fullUrl)
        {
            //First strip the url down to basics
            //remove http://

            string baseUrl = fullUrl.Replace("http://", "");
            baseUrl = baseUrl.Replace("https://", "");

            baseUrl = baseUrl.Replace(":24242", "");
            if (baseUrl.Contains("/"))
            {
                Int32 index = baseUrl.IndexOf("/");
                baseUrl = baseUrl.Substring(0, index);

            }

            return baseUrl;

        }
       
        public int getSolutionID(String baseurl)
        {
            //var solution = db.tblSolutions.Where(a=>a.developmentURL==baseurl).FirstOrDefault();
            var solution = pocoDb.Fetch<tblSolution>(" where developmentURL = @0", baseurl).FirstOrDefault();
            int solutionID = solution.solutionID;
            
            return solutionID;
        }
        public int getComponentID(String Url, int solutionId)
        {
            int compId;
            // var components = db.tblSolutionComponents.Where(a => a.solutionID == solutionId);
            //var component = db.tblSolutionComponents.Where(a => a.componentUrl.ToLower() == Url.ToLower() && a.solutionID == solutionId).FirstOrDefault();
            var components = pocoDb.Fetch<tblSolutionComponent>(" where solutionID = @0", solutionId);
            var component = pocoDb.Fetch<tblSolutionComponent>("where componentUrl.ToLower() = @0 and solutionID =@1", Url.ToLower(), solutionId).FirstOrDefault();
            if (component== null)
            {
                addNewComponent(Url,solutionId);
                //var componentNew = db.tblSolutionComponents.Where(a => a.componentUrl.ToLower() == Url.ToLower() && a.solutionID == solutionId).FirstOrDefault();
                var componentNew=pocoDb.Fetch<tblSolutionComponent>("where componentUrl.ToLower() = @0 and solutionID =@1", Url.ToLower(), solutionId).FirstOrDefault();
                compId = componentNew.componentID;
                return compId;
            }
            else
            {
                compId = component.componentID;
                return compId;
            }
            
        }
        public void addNewComponent(String Url, int solutionId)
        {
             if(ModelState.IsValid)
            {
                using (Streemline3_1PocoDB pocoDb = new Streemline3_1PocoDB())
                {
                    tblSolutionComponent solutionComponent = new tblSolutionComponent();
                    solutionComponent.componentTitle= Request.QueryString["ct"].ToString();
                    solutionComponent.componentUrl = Url;
                    solutionComponent.solutionID = solutionId;
                    solutionComponent.CreatedDate = DateTime.Now;
                    //db.tblSolutionComponents.Add(solutionComponent);
                    //db.SaveChanges();
                    pocoDb.Insert(solutionComponent);

                }
            }
        }
        /*
         *   var tblNote = db.tblNotes.Where(a => a.objectTypeID == 11 && a.objectID == id).ToList();
            var pids = tblNote.Select(x => x.createdByID).ToArray();
            //person created the note
            var personlist = db.tblPersons.Where(x => pids.Contains(x.PersonID)).ToList();
            ViewBag.personlist = personlist;
         */
        /*
        public ActionResult Cancel(int ID)
        {
            tblSolution tblSolution = db.tblSolutions.Find(ID);
            string solutionTitle = tblSolution.solutionTitle;


            var tblIssues = db.tblIssues.Include(t => t.tblIssueType).Include(t => t.tblIssueStatu).Where(a => a.solutionId == ID);

            var tblstatus = db.tblIssueStatus.ToList();
            var tblComponent = db.tblSolutionComponents.Where(a => a.solutionID == ID);

            var VM = new ClientPortal.ViewModels.IssueListViewModel
            {
                Issues = tblIssues,
                Statuses = tblstatus,
                Components = tblComponent

            };

            return View(VM);
           
        }
        */
        /*
        public ActionResult SaveRecord(IssueListViewModel model)
        {
            using(Streemline3_1Entities dbModel= new Streemline3_1Entities())
            {
                dbModel.tblIssues.Add(model);
                dbModel.SaveChanges();
            }
            ModelState.Clear();
            ViewBag.SuccessMessage = "Success";
            return View("SaveRecord", new IssueListViewModel());
        }
        */
    }

}
**********************
index
*********************
@model ClientPortal.ViewModels.IssueListViewModel

@{
    ViewBag.Title = "Index";
}

    <body>
        <h1>Solution List</h1>


        @foreach (var item in Model.Solutions)
        {
         <ul>
  
        
        @Html.ActionLink(item.solutionTitle.ToString(), "solutionIssues", "Issues", new { id = item.solutionID }, null)
        

         </ul>
         }
          
     </body>  
************************
solutionIssues
*****************************

@model ClientPortal.ViewModels.IssueListViewModel

@{
    ViewBag.Title = "Index";
   
}
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<body>
    <h2>@Session["solutionTitle"]:Issue Lists </h2>

    <p>

        <input type="button" id="btnAddIssue" value="Add Issue" onclick="location.href='@Url.Action("Go","Issues")?solutionID=' +@Session["solutionId"]"/>


    </p>
    
        <p>

        @Html.DropDownListFor(x => Model.Selectedstatus, new SelectList(Model.Statuses, "statusID", "statusTitle", ""), "--select the status--", htmlAttributes: new { @class = "form-control issuelist-filter", id = "statusID" })
        @Html.DropDownListFor(x => Model.SelectedComponents, new SelectList(Model.Components, "componentID", "componentTitle", ""), "--select the Page--", htmlAttributes: new { @class = "form-control issuelist-filter", id = "componentID" })

       </p>

        <script>
            $(document).ready(function () {
                $(".issuelist-filter").change(function () {
                    var componentID = $('#componentID').val();
                    var statusID = $('#statusID').val();
                    if (!componentID) {
                        componentID = 0;
                    }
                    if (!statusID) {
                        statusID = 0;
                    }

                    $.ajax({
                        type: "Post",
                        url: "/Issues/filterStatus/?componentID=" + componentID + "&statusID=" + statusID + "&solutionID=" +@Session["solutionId"],

                        success: function (response) {
                            $("#divList").html(response);
                        }
                    });
                });
              
            });

        </script>


    <br />

    <div id="divList">

        <br />
        <table class="table" id="idTable">
            <tr>
                <th>

                    ID
                </th>
                <th>
                    Title
                </th>

                <th>
                    Type
                </th>

                <th>
                    Status
                </th>
                <th></th>
            </tr>

            @foreach (var item in Model.Issues)
            {
                <tr>
                    <td>
                        @Html.ActionLink(item.issueID.ToString(), "Details", "Issues", new { id = item.issueID }, null)

                    </td>
                    <td>
                        @Html.ActionLink(item.issueTitle.ToString(), "Details", "Issues", new { id = item.issueID}, null)

                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.tblIssueType.typeTitle)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.tblIssueStatu.statusTitle)
                    </td>

                </tr>
            }

        </table>
    </div>

</body>
******************************
filterstatus
*****************************
@model ClientPortal.ViewModels.IssueListViewModel
<table class="table" id="idTable">
    <tr>
        <th>

            ID
        </th>
        <th>
            Title
        </th>

        <th>
            Type
        </th>

        <th>
            Status
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model.Issues)
    {
        <tr>
            <td>
                @Html.ActionLink(item.issueID.ToString(), "Details", "Issues", new { id = item.issueID }, null)

            </td>
            <td>
                @Html.ActionLink(item.issueTitle.ToString(), "Details", "Issues", new { id = item.issueID }, null)

            </td>
            <td>
                @Html.DisplayFor(modelItem => item.tblIssueType.typeTitle)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.tblIssueStatu.statusTitle)
            </td>

        </tr>
    }

</table>
***********************************
*****************************